# -*- coding: utf-8 -*-
"""Copy of endprojectindividual.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VFoyAA2fVFxwn4aBlpzs4DzEj15u2PQj

**Project Title: Empowering Smallholder Farmers Through Global Crop Yield Prediction**
"""

# Import libraries
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, recall_score
from sklearn.preprocessing import MinMaxScaler
from xgboost import XGBRegressor
from sklearn.ensemble import StackingRegressor
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import seaborn as sns

# Load files
data_path = ''
train = pd.read_csv(data_path + 'Train.csv')
test = pd.read_csv(data_path + 'Test.csv')
sample_submission = pd.read_csv(data_path + 'SampleSubmission.csv')
var_desc = pd.read_csv(data_path + 'VariableDescription.csv')

# Preview files
train.head()

test.head()

sample_submission.head()

# split data for training and local testing
X = train.drop(['ID', 'Yield'], axis=1)
X = X.select_dtypes(include=np.number)
y = train.Yield

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1234)

# Scale the features
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train.fillna(0))
X_test_scaled = scaler.transform(X_test.fillna(0))

# Instantiate models
random_forest_model = RandomForestRegressor(random_state=1234)
xgboost_model = XGBRegressor(random_state=1234)

# Stack models
estimators = [
    ('rf', random_forest_model),
    ('xgb', xgboost_model)
]
stacking_model = StackingRegressor(
    estimators=estimators,
    final_estimator=LinearRegression()
)

# Fit models
random_forest_model.fit(X_train_scaled, y_train)
xgboost_model.fit(X_train_scaled, y_train)
stacking_model.fit(X_train_scaled, y_train)

# Make predictions
rf_preds = random_forest_model.predict(X_test_scaled)
xgb_preds = xgboost_model.predict(X_test_scaled)
stacking_preds = stacking_model.predict(X_test_scaled)

# Evaluate model performance
rf_rmse = mean_squared_error(y_test, rf_preds, squared=False)
xgb_rmse = mean_squared_error(y_test, xgb_preds, squared=False)
stacking_rmse = mean_squared_error(y_test, stacking_preds, squared=False)

rf_recall = recall_score(y_test > 0, rf_preds > 0)  # Assuming binary classification for recall
xgb_recall = recall_score(y_test > 0, xgb_preds > 0)
stacking_recall = recall_score(y_test > 0, stacking_preds > 0)

# Print evaluation metrics
print(f"Random Forest RMSE: {rf_rmse}, Recall: {rf_recall}")
print(f"XGBoost RMSE: {xgb_rmse}, Recall: {xgb_recall}")
print(f"Stacking RMSE: {stacking_rmse}, Recall: {stacking_recall}")

#!pip install sklearn.tree

from sklearn.tree import plot_tree

# Visualize a single decision tree from Random Forest
plt.figure(figsize=(20, 10))
plot_tree(random_forest_model.estimators_[0], feature_names=X.columns, filled=True)
plt.title("Single Decision Tree from Random Forest")
plt.show()

# XGBoost Predictions
plt.subplot(2, 3, 2)
sns.scatterplot(x=y_test, y=xgb_preds)
plt.title("XGBoost Predictions vs. Actual")

print(stacking_preds.ndim)

if stacking_preds.ndim > 1:
    stacking_preds = stacking_preds.reshape(-1)

plt.subplot(2, 3, 3)
sns.scatterplot(x=y_test, y=stacking_preds)
plt.title("Stacking Predictions vs. Actual")

# Random Forest Residuals
plt.subplot(2, 3, 4)
sns.histplot(rf_preds - y_test, kde=True)
plt.title("Random Forest Residuals")

# XGBoost Residuals
plt.subplot(2, 3, 5)
sns.histplot(xgb_preds - y_test, kde=True)
plt.title("XGBoost Residuals")

# Stacking Residuals
plt.subplot(2, 3, 6)
sns.histplot(stacking_preds - y_test, kde=True)
plt.title("Stacking Residuals")

plt.tight_layout()
plt.show()

# Make predictions on the submission test
test_df = test[X.columns]
rf_preds = random_forest_model.predict(test_df.fillna(0))
xgb_preds = xgboost_model.predict(test_df.fillna(0))
stacking_preds = stacking_model.predict(test_df.fillna(0))

# Create submission files
rf_sub = pd.DataFrame({'ID': test.ID, 'Yield': rf_preds})
xgb_sub = pd.DataFrame({'ID': test.ID, 'Yield': xgb_preds})
stacking_sub = pd.DataFrame({'ID': test.ID, 'Yield': stacking_preds})

rf_sub.to_csv('RandomForestSubmission.csv', index=False)
xgb_sub.to_csv('XGBoostSubmission.csv', index=False)
stacking_sub.to_csv('StackingSubmission.csv', index=False)

rf_sub.head()

#!pip install pywedge

import pywedge as pw
import pandas as pd

# Assuming you have a DataFrame named df
mc = pw.Pywedge_Charts(train, c=None, y='Acre')

"""**DASHBOARD**"""

charts = mc.make_charts()
